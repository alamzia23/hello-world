name: Tested Comment Checker for Merged PRs

on:
  push:
  workflow_call:

jobs:
  check_merged_pr_comments:
    runs-on: ubuntu-latest

    #permissions:
     # issues: read
     # pull-requests: read

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18  # Your preferred Node.js version
      # - run: |
      #     pwd
      #     cd ${GITHUB_WORKSPACE}/actions/ListofPRs
      #     npm install @actions/core @octokit/rest  # Install both dependencies
      - run: |
         npm install @octokit/rest @actions/core @actions/github
            

      - name: Check for tested comments in merged PRs
        id: check_comments
        # run: |
        #   pwd
        #   # node ${GITHUB_WORKSPACE}/actions/ListofPRs/index.mjs
        #   npm run run-workflow
        run: |
          import { Octokit } from '@octokit/rest';
          import * as core from '@actions/core';
          import * as actions from '@actions/github';

          const context = actions.context;

          async function main() {
          try {
            const TOKEN_KEY = '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';
               const octokit = new Octokit({ TOKEN_KEY });

               const allPullRequests = await octokit.pulls.list({
                     owner: context.repo.owner,
                       repo: context.repo.repo,
                          state: 'closed',
                                                 });

                        for (const pr of allPullRequests.data) {
                                          try {
                                 const allCommentsForPR = await octokit.issues.listComments({
                                     owner: context.repo.owner,
                                      repo: context.repo.repo,
                                      issue_number: pr.number,
                                                                 });

                                     let hasTestedComment = false;
                                    for (const comment of allCommentsForPR.data) {
                                  if (comment.body.trim() === 'TESTED') {
                              /*console.log(`PR Number: ${pr.number}`);*/
                                 hasTestedComment = true;
                            break; // Exit the comment loop since a "TESTED" comment is found
                                          }
                                         }

                                    // Print the "TESTED" comments only if a "TESTED" comment exists
                                     if (hasTestedComment) {
                               const pullRequest = await octokit.pulls.get({
                                      owner: context.repo.owner,
                                     repo: context.repo.repo,
                                     pull_number: pr.number,
                                                             });

                               console.log(`SHA: ${pullRequest.data.head.sha}`);

                                   for (const comment of allCommentsForPR.data) {
                             if (comment.body.trim() === 'TESTED') {
                             console.log(`Comment ${comment.id}:`);
                                  console.log(comment.body);
                                     console.log('--------------------');
                                                      }
                                                         }
                                                             }
                                                 } catch (error) {
                                     console.error('Error processing pull request:', error.message);
                                                            }
                                                        }
                                                      } catch (error) {
                                            console.error('Error:', error.message);
                                          core.setFailed(error.message);
                                                              }
                                                               }

                                                      main();
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_KEY }}

      # - name: Process filtered comments
      #   if: steps.check_comments.outputs.filtered_comments
      #   run: |
      #     echo "Found ${{ steps.check_comments.outputs.filtered_comments.length }} comments containing 'TESTED' in merged PR:"
      #     for comment in ${{ steps.check_comments.outputs.filtered_comments }}; do
      #       echo "- ${comment.body}"
      #  done
